// This file was automatically generated by SWIG (http://www.swig.org).
// Version 2.0.4
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.

/* Function pointers support */
package com.adobe.flascc.swig {
import flash.utils.Dictionary;
import com.adobe.flascc.CModule;

[Weak]
var _SWIG_AS3Func2Ptr:Dictionary = new Dictionary();
[Weak]
var _SWIG_AS3Ptr2Func:Dictionary = new Dictionary();
[Weak]
var _SWIG_AS3FreeFuncPtrs:Array = new Array();

[Weak]
public function SWIG_AS3RegASCallWrapper(ptr:int, wrapper:Function):void {
    if (_SWIG_AS3Ptr2Func[ptr]) {
        throw("tried to register AS-callable wrapper for existing AS wrapper");
    }
    _SWIG_AS3Func2Ptr[wrapper] = ptr;
    _SWIG_AS3Ptr2Func[ptr] = wrapper;
}

[Weak]
public function SWIG_AS3UnregASCallWrapper(wrapper:Function):void {
    var ptr:int = _SWIG_AS3Func2Ptr[wrapper];
    delete _SWIG_AS3Func2Ptr[wrapper];
    delete _SWIG_AS3Ptr2Func[ptr];
}

// Returns Function objects callable from AS
[Weak]
public function SWIG_AS3GetASCallWrapper(ptr:int):Function {
    if (_SWIG_AS3Ptr2Func[ptr]) {
        return _SWIG_AS3Ptr2Func[ptr];
    } else {
        return null;
    }
}

// Returns the number of wrapped C and AS functions
[Weak]
public function SWIG_AS3WrapperNum():uint {
    var num:uint = 0;
    for (var key:int in _SWIG_AS3Ptr2Func) {
        num++;
    }
    return num;
}

[Weak]
public function SWIG_AS3RegCCallWrapper(func:Function, wrapper:Function):void {
    var ptr:int;
    
    if (_SWIG_AS3Func2Ptr[func]) {
        throw("tried to register C-callable wrapper for native C function");
    }

    if (_SWIG_AS3FreeFuncPtrs.length) {
        ptr = _SWIG_AS3FreeFuncPtrs.pop();
    } else {
        ptr = CModule.allocFunPtrs(null, 1, 4);
    }
    CModule.regFun(ptr, wrapper);
    _SWIG_AS3Func2Ptr[func] = ptr;
    _SWIG_AS3Ptr2Func[ptr] = func;

}

[Weak]
public function SWIG_AS3UnregCCallWrapper(func:Function):void {
    var ptr:int = _SWIG_AS3Func2Ptr[func];
    delete _SWIG_AS3Func2Ptr[func];
    delete _SWIG_AS3Ptr2Func[ptr];
    _SWIG_AS3FreeFuncPtrs.push(ptr);
}

// Returns a C function pointer corresponding to an Actionscript-callable 
// wrapper Function. (The C function is callable from C, of course).
[Weak]
public function SWIG_AS3GetCCallPtr(func:Function):int {
    if (_SWIG_AS3Func2Ptr[func]) {
        return _SWIG_AS3Func2Ptr[func];
    } else {
        return 0;
    }
}
} /* package */


package {
import C_Run.*;
import com.adobe.flascc.swig.*;
import flash.utils.ByteArray;

public class AACResampler {
}

public class AACDecompress {
	public var swigCPtr:int;
	public static function create():AACDecompress {
		var obj = new AACDecompress();
		obj.swigCPtr = _wrap_new_AACDecompress();
		return obj;
	}

	public function decompress(data:int, size:int, out_size:int):int {
		return _wrap_AACDecompress_decompress(swigCPtr, data, size, out_size);
	}

	public function terminate(out_size:int):int {
		return _wrap_AACDecompress_terminate(swigCPtr, out_size);
	}

	public function destroy():void {
		_wrap_delete_AACDecompress(swigCPtr);
	}

	public function set samplerate(samplerate:int):void {
		_wrap_AACDecompress_samplerate_set(swigCPtr, samplerate);
	}

	public function get samplerate():int {
		return _wrap_AACDecompress_samplerate_get(swigCPtr);
	}

	public function set channels(channels:String):void {
		_wrap_AACDecompress_channels_set(swigCPtr, channels);
	}

	public function get channels():String {
		return _wrap_AACDecompress_channels_get(swigCPtr);
	}

}


public class AudioResampler {
	public var swigCPtr:int;
	public static function create(sample_rate_in:int, sample_rate_out:int, channels:int):AudioResampler {
		var obj = new AudioResampler();
		obj.swigCPtr = _wrap_new_AudioResampler(sample_rate_in, sample_rate_out, channels);
		return obj;
	}

	public function bufferize(data_in:int, size:int):void {
		_wrap_AudioResampler_bufferize(swigCPtr, data_in, size);
	}

	public function process():void {
		_wrap_AudioResampler_process(swigCPtr);
	}

	public function flush(written:int):int {
		return _wrap_AudioResampler_flush(swigCPtr, written);
	}

	public function destroy():void {
		_wrap_delete_AudioResampler(swigCPtr);
	}

}

} /* package */
